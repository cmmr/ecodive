[{"path":[]},{"path":"https://cmmr.github.io/ecodive/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://cmmr.github.io/ecodive/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://cmmr.github.io/ecodive/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://cmmr.github.io/ecodive/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://cmmr.github.io/ecodive/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement dansmith01@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://cmmr.github.io/ecodive/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://cmmr.github.io/ecodive/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://cmmr.github.io/ecodive/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://cmmr.github.io/ecodive/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://cmmr.github.io/ecodive/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://cmmr.github.io/ecodive/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://cmmr.github.io/ecodive/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 ecodive authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cmmr.github.io/ecodive/articles/adiv.html","id":"input-matrix","dir":"Articles","previous_headings":"","what":"Input Matrix","title":"Alpha Diversity","text":"’ll use ex_counts feature table included ecodive. contains number observations bacterial genera sample. text , can substitute word ‘genera’ feature interest data.","code":"library(ecodive)  counts <- rarefy(ex_counts)  counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  309    6     1 #> Bacteroides            2    2    0   341 #> Corynebacterium        0    0  171     1 #> Haemophilus          180   34    0     1 #> Propionibacterium      1    0   82     0 #> Staphylococcus         0    0   86     1"},{"path":"https://cmmr.github.io/ecodive/articles/adiv.html","id":"alpha-diversity","dir":"Articles","previous_headings":"","what":"Alpha Diversity","title":"Alpha Diversity","text":"Alpha diversity measure diversity within single sample. Depending metric, may measure richness /evenness.","code":""},{"path":"https://cmmr.github.io/ecodive/articles/adiv.html","id":"richness","dir":"Articles","previous_headings":"Alpha Diversity","what":"Richness","title":"Alpha Diversity","text":"Richness many genera present sample. simplest metric count non-zero genera. Chao1 metric takes step including unobserved low abundance genera, inferred using number times counts == 1 vs counts == 2.","code":"colSums(counts > 0) #> Saliva   Gums   Nose  Stool  #>      4      3      4      5 # Infers 8 unobserved genera chao1(c(1, 1, 1, 1, 2, 5, 5, 5)) #> [1] 16  # Infers less than 1 unobserved genera chao1(c(1, 2, 2, 2, 2, 5, 5, 5)) #> [1] 8.125  # Datasets without 1s and 2s give Inf or NaN chao1(counts) #> Saliva   Gums   Nose  Stool  #>    4.5    3.0    NaN    Inf"},{"path":"https://cmmr.github.io/ecodive/articles/adiv.html","id":"evenness","dir":"Articles","previous_headings":"Alpha Diversity","what":"Evenness","title":"Alpha Diversity","text":"Evenness equally distributed genera within sample. Simpson metric good measure evenness.","code":"# High Evenness simpson(c(20, 20, 20, 20, 20)) #> [1] 0.8  # Low Evenness simpson(c(100, 1, 1, 1, 1)) #> [1] 0.07507396  # Stool < Gums < Saliva < Nose sort(simpson(counts)) #>      Stool       Gums     Saliva       Nose  #> 0.02302037 0.18806133 0.50725478 0.63539593"},{"path":"https://cmmr.github.io/ecodive/articles/adiv.html","id":"richness-and-evenness","dir":"Articles","previous_headings":"Alpha Diversity","what":"Richness and Evenness","title":"Alpha Diversity","text":"Shannon diversity index weights richness evenness.","code":"# Low richness, Low evenness shannon(c(1, 1, 100)) #> [1] 0.1101001  # Low richness, High evenness shannon(c(100, 100, 100)) #> [1] 1.098612  # High richness, Low evenness shannon(1:100) #> [1] 4.416898  # High richness, High evenness shannon(rep(100, 100)) #> [1] 4.60517  # Stool < Gums < Saliva < Nose sort(shannon(counts)) #>      Stool       Gums     Saliva       Nose  #> 0.07927797 0.35692121 0.74119910 1.10615349"},{"path":"https://cmmr.github.io/ecodive/articles/adiv.html","id":"phylogenetic-alpha-diversity","dir":"Articles","previous_headings":"Alpha Diversity","what":"Phylogenetic Alpha Diversity","title":"Alpha Diversity","text":"Faith’s phylogenetic diversity index incorporates phylogenetic tree genera order measure many tree’s branches represented sample.","code":"# ex_tree: # #       +----------44---------- Haemophilus #   +-2-| #   |   +----------------68---------------- Bacteroides   #   |                       #   |             +---18---- Streptococcus #   |      +--12--|        #   |      |      +--11-- Staphylococcus #   +--11--|               #          |      +-----24----- Corynebacterium #          +--12--| #                 +--13-- Propionibacterium   faith(c(Propionibacterium = 1, Corynebacterium = 1), tree = ex_tree) #> [1] 60  faith(c(Propionibacterium = 1, Haemophilus = 1), tree = ex_tree) #> [1] 82  # Nose < Gums < Saliva < Stool sort(faith(counts, tree = ex_tree)) #>   Nose   Gums Saliva  Stool  #>    101    155    180    202"},{"path":"https://cmmr.github.io/ecodive/articles/bdiv.html","id":"input-matrix","dir":"Articles","previous_headings":"","what":"Input Matrix","title":"Beta Diversity","text":"’ll use ex_counts feature table included ecodive. contains number observations bacterial genera sample. text , can substitute word ‘genera’ feature interest data.","code":"library(ecodive)  counts <- rarefy(ex_counts)  counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  309    6     1 #> Bacteroides            2    2    0   341 #> Corynebacterium        0    0  171     1 #> Haemophilus          180   34    0     1 #> Propionibacterium      1    0   82     0 #> Staphylococcus         0    0   86     1"},{"path":"https://cmmr.github.io/ecodive/articles/bdiv.html","id":"beta-diversity","dir":"Articles","previous_headings":"","what":"Beta Diversity","title":"Beta Diversity","text":"Beta diversity measure different two samples . Looking counts matrix , can easily see saliva gums similar, saliva stool different. different metrics described quantify difference, referred “distance” “dissimilarity” pair samples. distance 0 identical samples 1 completely different samples.","code":""},{"path":"https://cmmr.github.io/ecodive/articles/bdiv.html","id":"weighted-vs-unweighted","dir":"Articles","previous_headings":"Beta Diversity","what":"Weighted vs Unweighted","title":"Beta Diversity","text":"classic algorithms run weighted mode default. Specifying weighted = FALSE, e.g. canberra(counts, weighted = FALSE) switch unweighted mode. bray_curtis(), canberra(), euclidean(), gower(), jaccard(), kulczynski(), manhattan() UniFrac algorithms, unweighted_unifrac() unweighted others weighted. Unweighted: unweighted_unifrac() Weighted: weighted_unifrac(), weighted_normalized_unifrac(), generalized_unifrac(), variance_adjusted_unifrac()","code":""},{"path":"https://cmmr.github.io/ecodive/articles/bdiv.html","id":"partial-calculation","dir":"Articles","previous_headings":"","what":"Partial Calculation","title":"Beta Diversity","text":"default value pairs=NULL ecodive’s beta diversity functions results returned -vs-distance matrix completely filled . reference-vs-comparison, can use pairs parameter skip unwanted calculations save CPU time. larger dataset, noticeable improvement . pairs argument can : numeric vector, giving positions result calculate. logical vector, indicating whether calculate position result. function(,j) returns whether columns j compared. Therefore, following equivalent: ordering pairs follows pairings produced combn(). , instance, use gums reference sample:","code":"bray_curtis(counts) #>          Saliva      Gums      Nose #> Gums  0.4260870                     #> Nose  0.9797101 0.9826087           #> Stool 0.9884058 0.9884058 0.9913043 bray_curtis(counts, pairs = 1:3) #>          Saliva      Gums      Nose #> Gums  0.4260870                     #> Nose  0.9797101        NA           #> Stool 0.9884058        NA        NA bray_curtis(counts, pairs = 1:3) bray_curtis(counts, pairs = c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE)) bray_curtis(counts, pairs = function (i, j) i == 1) # Column index pairings combn(ncol(counts), 2) #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    1    2    2    3 #> [2,]    2    3    4    3    4    4  # Sample name pairings combn(colnames(counts), 2) #>      [,1]     [,2]     [,3]     [,4]   [,5]    [,6]    #> [1,] \"Saliva\" \"Saliva\" \"Saliva\" \"Gums\" \"Gums\"  \"Nose\"  #> [2,] \"Gums\"   \"Nose\"   \"Stool\"  \"Nose\" \"Stool\" \"Stool\" my_combn <- combn(colnames(counts), 2) my_pairs <- my_combn[1,] == 'Gums' | my_combn[2,] == 'Gums'  my_pairs #> [1]  TRUE FALSE FALSE  TRUE  TRUE FALSE  bray_curtis(counts, pairs = my_pairs) #>          Saliva      Gums      Nose #> Gums  0.4260870                     #> Nose         NA 0.9826087           #> Stool        NA 0.9884058        NA"},{"path":[]},{"path":"https://cmmr.github.io/ecodive/articles/benchmark.html","id":"state-of-the-field","dir":"Articles","previous_headings":"Introduction","what":"State of the Field","title":"Benchmarks","text":"table shows collection bioinformatics R packages implement classic alpha/beta ecology diversity metrics (e.g. Bray-Curtis, Shannon, etc) implement UniFrac metrics. six packages - abdiv, ampvis2, ecodive, GUniFrac, phyloseq, vegan - implementations algorithms. R packages import code ecodive, GUniFrac, phyloseq, /vegan handle alpha beta diversity computations. Therefore, six packages benchmarked.","code":""},{"path":"https://cmmr.github.io/ecodive/articles/benchmark.html","id":"methodology","dir":"Articles","previous_headings":"Introduction","what":"Methodology","title":"Benchmarks","text":"use ‘bench’ R package track runtime memory consumption diversity algorithms six R packages. host system benchmarking runs following specifications. bench::mark() function also checks output benchmarked expressions equal.","code":"6-Core i5-9600K CPU @ 3.70GHz; 64.0 GB RAM Windows 11 Pro x64 24H2 26100.4652"},{"path":"https://cmmr.github.io/ecodive/articles/benchmark.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Benchmarks","text":"’ll use two datasets rbiom R package: hmp50 gems. hmp50 50 samples phylogenetic tree. used benchmarking UniFrac Faith phylogenetic metrics. classic diversity metrics much faster calculate. Therefore, ’ll use 1,006-sample gems dataset . input output formats six R packages identical, benchmarking code transform data needed. Whenever possible, transformations take place outside timed block.","code":"install.packages('pak')  pak::pkg_install(pkg = c(   'abdiv', 'ecodive', 'GUniFrac', 'kasperskytte/ampvis2',    'bench', 'phyloseq', 'rbiom', 'vegan' ))   library(bench) library(ggplot2) library(ggrepel) library(dplyr)  version$version.string #> [1] \"R version 4.5.1 (2025-06-13 ucrt)\"  sapply(FUN = packageDescription, fields = 'Version', c(   'abdiv', 'ampvis2', 'ecodive', 'GUniFrac', 'phyloseq', 'vegan' )) #>    abdiv  ampvis2  ecodive  GUniFrac  phyloseq    vegan  #>  \"0.2.0\"  \"2.8.9\"  \"1.0.0\"     \"1.8\"  \"1.52.0\"  \"2.7-1\"  (n_cpus <- ecodive::n_cpus()) #> [1] 6  # abdiv only accepts two samples at a time pairwise <- function (f, data, ...) {   pairs <- utils::combn(ncol(data), 2)   structure(     mapply(       FUN = function (i, j) f(data[,i], data[,j], ...),        i   = pairs[1,], j = pairs[2,] ),     class  = 'dist',     Labels = colnames(data),     Size   = ncol(data),     Diag   = FALSE,     Upper  = FALSE ) }   # Remove any extraneous attributes from dist objects, # allowing them to be compared with `all.equal()`. cleanup <- function (x) {   attr(x, 'maxdist') <- NULL   attr(x, 'method')  <- NULL   attr(x, 'call')    <- NULL   return (x) }   # HMP50 dataset has 50 Samples hmp50      <- rbiom::hmp50 hmp50_phy  <- rbiom::convert_to_phyloseq(hmp50) hmp50_mtx  <- as.matrix(hmp50) hmp50_tmtx <- t(hmp50_mtx) hmp50_tree <- hmp50$tree   # GEMS dataset has 1006 Samples gems_mtx  <- as.matrix(rbiom::gems) gems_tmtx <- t(gems_mtx)"},{"path":"https://cmmr.github.io/ecodive/articles/benchmark.html","id":"unifrac","dir":"Articles","previous_headings":"","what":"UniFrac","title":"Benchmarks","text":"’ll compare time memory taken unweighted, weighted, weight normalized, generalized, variance adjusted UniFrac functions abdiv, ecodive, GUniFrac, phyloseq, ampvis2 R packages. functions run 10 times time speed, 1 time analyze memory usage.  ecodive’s UniFrac functions faster abdiv, GUniFrac, phyloseq, ampvis2’s implementations 1 - 3 orders magnitude. ecodive’s UniFrac functions also memory efficient packages’ 1 - 4 orders magnitude.","code":"## Unweighted UniFrac u_unifrac_res <- rbind(    local({     # cluster for phyloseq     cl <- parallel::makeCluster(n_cpus)     doParallel::registerDoParallel(cl)     on.exit(parallel::stopCluster(cl))          bench::mark(       iterations = 10,       'abdiv'    = cleanup(pairwise(abdiv::unweighted_unifrac, hmp50_mtx, hmp50_tree)),       'ecodive'  = cleanup(ecodive::unweighted_unifrac(hmp50_mtx, hmp50_tree)),       'GUniFrac' = cleanup(as.dist(GUniFrac::GUniFrac(hmp50_tmtx, hmp50_tree, alpha=1, verbose=FALSE)[[1]][,,2])),       'phyloseq' = cleanup(phyloseq::UniFrac(hmp50_phy, weighted=FALSE, normalized=FALSE, parallel=TRUE)) )   }),      # ampvis2 conflicts with phyloseq cluster, so run separately   bench::mark(     iterations = 10,     'ampvis2'  = {       cleanup(ampvis2:::dist.unifrac(hmp50_mtx, hmp50_tree, weighted=FALSE, normalise=FALSE, num_threads=n_cpus))       doParallel::stopImplicitCluster() } ) )  u_unifrac_res[,1:9] #> # A tibble: 5 × 13 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc total_time #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> <int> <dbl>   <bch:tm> #> 1 abdiv        13.84s   14.38s    0.0676    20.1GB   1.87      10   277      2.46m #> 2 ecodive      5.19ms   5.31ms  184.       770.5KB   0         10     0    54.23ms #> 3 GUniFrac    77.89ms   80.4ms   11.7       92.1MB   1.17      10     1   858.32ms #> 4 phyloseq   292.07ms 327.01ms    2.49      49.9MB   0         10     0      4.02s #> 5 ampvis2       3.36s    3.44s    0.288     49.8MB   0.0320     9     1     31.29s  ggplot(u_unifrac_res, aes(x = median, y = mem_alloc)) +   geom_point() +   geom_label_repel(aes(label = as.character(expression))) +    labs(     title = 'Unweighted UniFrac Implementations',     subtitle = '50 sample all-vs-all benchmarking on six CPU cores',     x = 'Median Calculation Time (log scale; n=10)',      y = 'Memory Allocated\\n(log scale)' ) +   theme_bw()       ## Weighted UniFrac w_unifrac_res <- rbind(    local({     # cluster for phyloseq     cl <- parallel::makeCluster(n_cpus)     doParallel::registerDoParallel(cl)     on.exit(parallel::stopCluster(cl))          bench::mark(       iterations = 10,       'abdiv'    = cleanup(pairwise(abdiv::weighted_unifrac, hmp50_mtx, hmp50_tree)),       'ecodive'  = cleanup(ecodive::weighted_unifrac(hmp50_mtx, hmp50_tree)),       'phyloseq' = cleanup(phyloseq::UniFrac(hmp50_phy, weighted=TRUE, normalized=FALSE, parallel=TRUE)) )   }),      # ampvis2 conflicts with phyloseq cluster, so run separately   bench::mark(     iterations = 10,     'ampvis2'  = {       cleanup(ampvis2:::dist.unifrac(hmp50_mtx, hmp50_tree, weighted=TRUE, normalise=FALSE, num_threads=n_cpus))       doParallel::stopImplicitCluster() } ) )       ## Weighted Normalized UniFrac wn_unifrac_res <- rbind(    local({     # cluster for phyloseq     cl <- parallel::makeCluster(n_cpus)     doParallel::registerDoParallel(cl)     on.exit(parallel::stopCluster(cl))          bench::mark(       iterations = 10,       'abdiv'    = cleanup(pairwise(abdiv::weighted_normalized_unifrac, hmp50_mtx, hmp50_tree)),       'ecodive'  = cleanup(ecodive::weighted_normalized_unifrac(hmp50_mtx, hmp50_tree)),       'GUniFrac' = cleanup(as.dist(GUniFrac::GUniFrac(hmp50_tmtx, hmp50_tree, alpha=1, verbose=FALSE)[[1]][,,1])),       'phyloseq' = cleanup(phyloseq::UniFrac(hmp50_phy, weighted=TRUE, normalized=TRUE, parallel=TRUE)) )   }),      # ampvis2 conflicts with phyloseq cluster, so run separately   bench::mark(     iterations = 10,     'ampvis2'  = {       cleanup(ampvis2:::dist.unifrac(hmp50_mtx, hmp50_tree, weighted=TRUE, normalise=TRUE, num_threads=n_cpus))       doParallel::stopImplicitCluster() } ) )   ## Weighted Normalized UniFrac g_unifrac_res <- rbind(    local({     # cluster for phyloseq     cl <- parallel::makeCluster(n_cpus)     doParallel::registerDoParallel(cl)     on.exit(parallel::stopCluster(cl))          bench::mark(       iterations = 10,       'abdiv'    = cleanup(pairwise(abdiv::generalized_unifrac, hmp50_mtx, hmp50_tree, alpha=0.5)),       'ecodive'  = cleanup(ecodive::generalized_unifrac(hmp50_mtx, hmp50_tree, alpha=0.5)),       'GUniFrac' = cleanup(as.dist(GUniFrac::GUniFrac(hmp50_tmtx, hmp50_tree, alpha=0.5, verbose=FALSE)[[1]][,,1])) )   }) )   ## Variance Adjusted UniFrac va_unifrac_res <- rbind(    local({     # cluster for phyloseq     cl <- parallel::makeCluster(n_cpus)     doParallel::registerDoParallel(cl)     on.exit(parallel::stopCluster(cl))          bench::mark(       iterations = 10,       'abdiv'    = cleanup(pairwise(abdiv::variance_adjusted_unifrac, hmp50_mtx, hmp50_tree)),       'ecodive'  = cleanup(ecodive::variance_adjusted_unifrac(hmp50_mtx, hmp50_tree)) )   }) )   unifrac_res <- bind_rows(     mutate(u_unifrac_res,  `UniFrac Variant` = 'Unweighted'),     mutate(w_unifrac_res,  `UniFrac Variant` = 'Weighted'),     mutate(wn_unifrac_res, `UniFrac Variant` = 'Weighted Normalized'),     mutate(g_unifrac_res,  `UniFrac Variant` = 'Generalized'),     mutate(va_unifrac_res, `UniFrac Variant` = 'Variance Adjusted') ) %>%   mutate(Package = as.character(expression)) %>%   select(Package, `UniFrac Variant`, median, mem_alloc) %>%   arrange(Package)   unifrac_res #> # A tibble: 19 × 4 #>    Package  `UniFrac Variant`     median mem_alloc #>    <chr>    <chr>               <bch:tm> <bch:byt> #>  1 GUniFrac Unweighted            80.4ms   92.14MB #>  2 GUniFrac Weighted Normalized  79.01ms   92.14MB #>  3 GUniFrac Generalized          77.28ms   92.18MB #>  4 abdiv    Unweighted            14.38s   20.05GB #>  5 abdiv    Weighted              14.55s   20.02GB #>  6 abdiv    Weighted Normalized   14.29s   20.03GB #>  7 abdiv    Generalized           14.59s   20.18GB #>  8 abdiv    Variance Adjusted      16.6s   24.46GB #>  9 ampvis2  Unweighted             3.44s   49.76MB #> 10 ampvis2  Weighted               3.38s   52.78MB #> 11 ampvis2  Weighted Normalized    3.43s   49.34MB #> 12 ecodive  Unweighted            5.31ms   770.5KB #> 13 ecodive  Weighted              5.17ms  779.72KB #> 14 ecodive  Weighted Normalized   4.93ms   770.5KB #> 15 ecodive  Generalized           5.61ms    1.03MB #> 16 ecodive  Variance Adjusted     4.81ms  779.73KB #> 17 phyloseq Unweighted          327.01ms   49.94MB #> 18 phyloseq Weighted            306.97ms   50.29MB #> 19 phyloseq Weighted Normalized 293.69ms   49.53MB  ggplot(unifrac_res, aes(x = median, y = mem_alloc)) +   geom_point(aes(shape = `UniFrac Variant`), size = 2) +   geom_label_repel(     data = ~subset(., `UniFrac Variant` == 'Unweighted'),     mapping = aes(label = Package),     box.padding = 0.4,     min.segment.length = Inf ) +    scale_shape(solid = FALSE) +    labs(     title = 'UniFrac Implementations',     subtitle = 'All-vs-all 50 sample benchmarking on six CPU cores',     x = 'Median Calculation Time (log scale; n=10)',      y = 'Memory Allocated\\n(log scale)' ) +   theme_bw()"},{"path":"https://cmmr.github.io/ecodive/articles/benchmark.html","id":"classic-beta-diversity","dir":"Articles","previous_headings":"","what":"Classic Beta Diversity","title":"Benchmarks","text":"’ll benchmark Bray-Curtis, Euclidean, Jaccard, Manhattan classic beta diversity algorithms abdiv, ecodive, vegan R packages. functions run 10 times time speed, 1 time analyze memory usage.  Ecodive’s Bray-Curtis, Euclidean, Jaccard, Manhattan implementations faster abdiv vegan 1 - 2 orders magnitude. Ecodive’s classic beta diversity implementations also memory efficient abdiv vegan. Furthermore, values returned abdiv::jaccard() inconsistent returned equivalent ecodive vegan functions.","code":"bray_curtis_res <- bench::mark(   iterations = 10,   'abdiv'    = cleanup(pairwise(abdiv::bray_curtis, gems_mtx)),   'ecodive'  = cleanup(ecodive::bray_curtis(gems_mtx)),   'vegan'    = cleanup(vegan::vegdist(gems_tmtx, 'bray')) )  jaccard_res <- bench::mark(   iterations = 10,   check      = FALSE, # abdiv has incorrect output   'abdiv'    = cleanup(pairwise(abdiv::jaccard, gems_mtx)),   'ecodive'  = cleanup(ecodive::jaccard(gems_mtx)),   'vegan'    = cleanup(vegan::vegdist(gems_tmtx, 'jaccard')) )  manhattan_res <- bench::mark(   iterations = 10,   'abdiv'    = cleanup(pairwise(abdiv::manhattan, gems_mtx)),   'ecodive'  = cleanup(ecodive::manhattan(gems_mtx)),   'vegan'    = cleanup(vegan::vegdist(gems_tmtx, 'manhattan')) )  euclidean_res <- bench::mark(   iterations = 10,   'abdiv'    = cleanup(pairwise(abdiv::euclidean, gems_mtx)),   'ecodive'  = cleanup(ecodive::euclidean(gems_mtx)),   'vegan'    = cleanup(vegan::vegdist(gems_tmtx, 'euclidean')) )  bdiv_res <- bind_rows(     mutate(bray_curtis_res, Metric = 'Bray-Curtis'),     mutate(jaccard_res,     Metric = 'Jaccard'),     mutate(manhattan_res,   Metric = 'Manhattan'),     mutate(euclidean_res,   Metric = 'Euclidean') ) %>%   mutate(Package = as.character(expression)) %>%   select(Package, Metric, median, mem_alloc) %>%   arrange(Package)   bdiv_res #> # A tibble: 12 × 4 #>    Package Metric        median mem_alloc #>    <chr>   <chr>       <bch:tm> <bch:byt> #>  1 abdiv   Bray-Curtis   12.16s    14.7GB #>  2 abdiv   Jaccard        15.6s      22GB #>  3 abdiv   Manhattan     10.13s    13.2GB #>  4 abdiv   Euclidean     10.92s    16.1GB #>  5 ecodive Bray-Curtis   72.8ms    26.3MB #>  6 ecodive Jaccard      73.68ms    26.3MB #>  7 ecodive Manhattan    73.47ms    26.3MB #>  8 ecodive Euclidean    72.84ms    26.3MB #>  9 vegan   Bray-Curtis    1.75s    22.4MB #> 10 vegan   Jaccard        1.82s    22.3MB #> 11 vegan   Manhattan      1.68s    19.4MB #> 12 vegan   Euclidean      1.68s    19.4MB  ggplot(bdiv_res, aes(x = median, y = mem_alloc)) +   geom_point(aes(shape = Metric), size = 2) +   geom_label_repel(     data = ~subset(., Metric == 'Bray-Curtis'),     mapping = aes(label = Package),     box.padding = 1,     min.segment.length = Inf ) +    scale_shape(solid = FALSE) +    labs(     title = 'Classic Beta Diversity Implementations',     subtitle = 'All-vs-all 1,006 sample benchmarking on six CPU cores',     x = 'Median Calculation Time (log scale; n=10)',      y = 'Memory Allocated\\n(log scale)' ) +   theme_bw()"},{"path":"https://cmmr.github.io/ecodive/articles/benchmark.html","id":"alpha-diversity","dir":"Articles","previous_headings":"","what":"Alpha Diversity","title":"Benchmarks","text":"Last, ’ll compare Shannon, Simpson, Faith alpha diversity implementations abdiv, ecodive, vegan R packages. Faith’s phylogenetic diversity metric run 50 samples, Shannon Simpson metrics run 1,006 samples.  Ecodive’s Faith, Shannon, Simpson implementations faster abdiv vegan 1 - 2 orders magnitude. Ecodive’s alpha diversity implementations also memory efficient abdiv vegan, especially Faith’s phylogenetic diversity.","code":"shannon_res <- bench::mark(   iterations = 10,   'abdiv'    = apply(gems_mtx, 2L, abdiv::shannon),   'ecodive'  = ecodive::shannon(gems_mtx),   'vegan'    = vegan::diversity(gems_tmtx, 'shannon') )  simpson_res <- bench::mark(   iterations = 10,   'abdiv'    = apply(gems_mtx, 2L, abdiv::simpson),   'ecodive'  = ecodive::simpson(gems_mtx),   'vegan'    = vegan::diversity(gems_tmtx, 'simpson') )  faith_res <- bench::mark(   iterations = 10,   'abdiv'    = apply(hmp50_mtx, 2L, abdiv::faith_pd, hmp50_tree),   'ecodive'  = ecodive::faith(hmp50_mtx, hmp50_tree) )  adiv_res <- bind_rows(     mutate(shannon_res, Metric = 'Shannon x 1006'),     mutate(simpson_res, Metric = 'Simpson x 1006'),     mutate(faith_res,   Metric = 'Faith PD x 50') ) %>%   mutate(Package = as.character(expression)) %>%   select(Package, Metric, median, mem_alloc) %>%   arrange(Package)   adiv_res #> # A tibble: 8 × 4 #>   Package Metric           median mem_alloc #>   <chr>   <chr>          <bch:tm> <bch:byt> #> 1 abdiv   Shannon x 1006  65.41ms    89.5MB #> 2 abdiv   Simpson x 1006   14.4ms    26.8MB #> 3 abdiv   Faith PD x 50  503.49ms   651.4MB #> 4 ecodive Shannon x 1006   7.13ms    14.7MB #> 5 ecodive Simpson x 1006   7.05ms    14.7MB #> 6 ecodive Faith PD x 50  843.25µs   749.2KB #> 7 vegan   Shannon x 1006  59.41ms    62.2MB #> 8 vegan   Simpson x 1006  37.46ms    56.3MB  ggplot(adiv_res, aes(x = median, y = mem_alloc)) +   geom_point(size = 2) +   geom_label_repel(aes(label = Package)) +    facet_wrap('Metric', nrow = 1, scales = 'free') +    labs(     title = 'Alpha Diversity Implementations',     subtitle = '50 or 1,006 sample benchmarking on six CPU cores',     x = 'Median Calculation Time (log scale; n=10)',      y = 'Memory Allocated\\n(log scale)' ) +   theme_bw()"},{"path":"https://cmmr.github.io/ecodive/articles/ecodive.html","id":"intoduction","dir":"Articles","previous_headings":"","what":"Intoduction","title":"Introduction to ecodive","text":"Ecodive calculates ecological diversity metrics. Alpha diversity metrics provide insight single sample’s diversity, whereas beta diversity metrics indicate different pair samples . guide, ’ll use ex_counts dataset included ecodive. ex_counts feature table enumerates many times bacterial genera observed different body sites. example, ‘features’ feature table genera. However, dataset can use whatever feature makes sense - species, OTUs, ASVs, even something completely unrelated ecology.","code":"library(ecodive)  ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1"},{"path":"https://cmmr.github.io/ecodive/articles/ecodive.html","id":"alpha-diversity","dir":"Articles","previous_headings":"","what":"Alpha Diversity","title":"Introduction to ecodive","text":"Alpha diversity metrics describe many different genera present sample. Depending metric, can take account number unique genera (richness), evenly population split among genera (evenness), distantly related genera (phylogenetic diversity). Classic metrics: chao1(), shannon(), simpson(), inv_simpson() Phylogenetic metrics: faith() reading: vignette('adiv')","code":""},{"path":"https://cmmr.github.io/ecodive/articles/ecodive.html","id":"beta-diversity","dir":"Articles","previous_headings":"","what":"Beta Diversity","title":"Introduction to ecodive","text":"Beta diversity metrics describe different two samples , based genera observed . Also known “distance” “dissimilarity”. UniFrac metrics incorporate phylogenetic tree calculation. Classic metrics: bray_curtis(), canberra(), euclidean(), gower(), jaccard(), kulczynski(), manhattan() Phylogenetic metrics: unweighted_unifrac(), weighted_unifrac(), weighted_normalized_unifrac(), generalized_unifrac(), variance_adjusted_unifrac() reading: vignette('bdiv') vignette('unifrac').","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/articles/ecodive.html","id":"rarefaction","dir":"Articles","previous_headings":"Example","what":"Rarefaction","title":"Introduction to ecodive","text":"ex_counts feature table 345 saliva observations, nose 1011 observations. unequal sampling depth can cause systematic biases. Specifically, rare genera observed often samples greater sampling depths, thereby artificially inflating observed richness. first step rarefy ex_counts samples number observations. Rarefying randomly removes observations samples observations.","code":"colSums(ex_counts) #> Saliva   Gums   Nose  Stool  #>    345    886   1011    615   counts <- rarefy(ex_counts)  colSums(counts) #> Saliva   Gums   Nose  Stool  #>    345    345    345    345   counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  309    6     1 #> Bacteroides            2    2    0   341 #> Corynebacterium        0    0  171     1 #> Haemophilus          180   34    0     1 #> Propionibacterium      1    0   82     0 #> Staphylococcus         0    0   86     1"},{"path":"https://cmmr.github.io/ecodive/articles/ecodive.html","id":"classic-metrics","dir":"Articles","previous_headings":"Example","what":"Classic Metrics","title":"Introduction to ecodive","text":"alpha beta diversity metrics around 50+ years don’t require phylogenetic tree. beta diversity functions can take weighted = FALSE argument use presence/absence information instead relative abundances.","code":"## Alpha Diversity -------------------  shannon(counts) #>     Saliva       Gums       Nose      Stool  #> 0.74119910 0.35692121 1.10615349 0.07927797    ## Beta Diversity --------------------  bray_curtis(counts) #>          Saliva      Gums      Nose #> Gums  0.4260870                     #> Nose  0.9797101 0.9826087           #> Stool 0.9884058 0.9884058 0.9913043  bray_curtis(counts, weighted = FALSE) #>          Saliva      Gums      Nose #> Gums  0.1428571                     #> Nose  0.5000000 0.7142857           #> Stool 0.3333333 0.2500000 0.3333333"},{"path":"https://cmmr.github.io/ecodive/articles/ecodive.html","id":"phylogenetic-metrics","dir":"Articles","previous_headings":"Example","what":"Phylogenetic Metrics","title":"Introduction to ecodive","text":"phylogenetic tree enables alpha beta diversity metrics take account evolutionary relatedness observed genera, generally giving higher diversity values samples distantly related genera. Faith (alpha diversity) UniFrac (beta diversity) examples phylogenetic metrics. ex_tree object included ecodive provides phylogenetic tree genera ex_counts. datasets, can use ecodive’s read_tree() function import phylogenetic tree newick formatted string file.","code":"## Alpha Diversity -------------------  faith(counts, tree = ex_tree) #> Saliva   Gums   Nose  Stool  #>    180    155    101    202    ## Beta Diversity --------------------  weighted_normalized_unifrac(counts, tree = ex_tree) #>          Saliva      Gums      Nose #> Gums  0.4328662                     #> Nose  0.7928701 0.6767840           #> Stool 0.9677535 0.9829736 0.9936121"},{"path":"https://cmmr.github.io/ecodive/articles/ecodive.html","id":"distance-matrices","dir":"Articles","previous_headings":"Example","what":"Distance Matrices","title":"Introduction to ecodive","text":"Beta diversity functions return dist object. can convert standard R matrix .matrix() function.","code":"dm <- bray_curtis(counts, weighted = FALSE) dm #>          Saliva      Gums      Nose #> Gums  0.1428571                     #> Nose  0.5000000 0.7142857           #> Stool 0.3333333 0.2500000 0.3333333  mtx <- as.matrix(dm) mtx #>           Saliva      Gums      Nose     Stool #> Saliva 0.0000000 0.1428571 0.5000000 0.3333333 #> Gums   0.1428571 0.0000000 0.7142857 0.2500000 #> Nose   0.5000000 0.7142857 0.0000000 0.3333333 #> Stool  0.3333333 0.2500000 0.3333333 0.0000000  mtx['Saliva', 'Nose'] #> [1] 0.5"},{"path":"https://cmmr.github.io/ecodive/articles/unifrac.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"UniFrac Calculations","text":"different UniFrac algorithms listed , along examples calculating .","code":""},{"path":"https://cmmr.github.io/ecodive/articles/unifrac.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input Data","title":"UniFrac Calculations","text":"numeric matrix two samples five species. phylogenetic tree five species.","code":""},{"path":"https://cmmr.github.io/ecodive/articles/unifrac.html","id":"definitions","dir":"Articles","previous_headings":"","what":"Definitions","title":"UniFrac Calculations","text":"branch indices (green circles) used ordering L, , B arrays. Values L drawn input phylogenetic tree. Values B total number species observations descending branch; Sample_A, B Sample_B.","code":""},{"path":"https://cmmr.github.io/ecodive/articles/unifrac.html","id":"unweighted","dir":"Articles","previous_headings":"","what":"Unweighted","title":"UniFrac Calculations","text":"Lozupone et al, 2005: Unweighted UniFrac R Package ecodive: unweighted_unifrac() R Package abdiv: unweighted_unifrac() R Package phyloseq: UniFrac(weighted=FALSE) qiime2 qiime diversity beta-phylogenetic --p-metric unweighted_unifrac mothur: unifrac.unweighted() First, transform B presence (1) absence (0) indicators. \\begin{align*}  &= \\{9, 0, 0, 0, 9, 6, 3, 3\\} \\\\ ' &= \\{1, 0, 0, 0, 1, 1, 1, 1\\} \\end{align*} \\begin{align*} B  &= \\{7, 5, 1, 4, 2, 8, 8, 0\\} \\\\ B' &= \\{1, 1, 1, 1, 1, 1, 1, 0\\} \\end{align*} apply formula: \\begin{align*} U &= \\displaystyle \\frac{\\sum_{= 1}^{n} L_i(|'_i - B'_i|)}{\\sum_{= 1}^{n} L_i(max('_i,B'_i))}  \\\\ \\\\ U &= \\displaystyle \\frac{L_1(|'_1-B'_1|) + L_2(|'_2-B'_2|) + \\cdots + L_n(|'_n-B'_n|)}{L_1(max('_1,B'_1)) + L_2(max('_2,B'_2)) + \\cdots + L_n(max('_n,B'_n))}  \\\\ \\\\ U &= \\displaystyle \\frac{0.2(|1-1|) + 0.4(|0-1|) + \\cdots + 0.3(|1-0|)}{0.2(max(1,1)) + 0.4(max(0,1)) + \\cdots + 0.3(max(1,0))}  \\\\ \\\\ U &= \\displaystyle \\frac{0.2(0) + 0.4(1) + 0.8(1) + 0.5(1) + 0.9(0) + 0.6(0) + 0.7(0) + 0.3(1)}{0.2(1) + 0.4(1) + 0.8(1) + 0.5(1) + 0.9(1) + 0.6(1) + 0.7(1) + 0.3(1)}  \\\\ \\\\ U &= \\displaystyle \\frac{0.4 + 0.8 + 0.5 + 0.3}{0.2 + 0.4 + 0.8 + 0.5 + 0.9 + 0.6 + 0.7 + 0.3}  \\\\ \\\\ U &= \\displaystyle \\frac{2}{4.4}  \\\\ \\\\ U &= 0.4545455 \\end{align*}","code":""},{"path":"https://cmmr.github.io/ecodive/articles/unifrac.html","id":"weighted","dir":"Articles","previous_headings":"","what":"Weighted","title":"UniFrac Calculations","text":"Lozupone et al, 2007: Raw Weighted UniFrac R Package ecodive: weighted_unifrac() R Package abdiv: weighted_unifrac() R Package phyloseq: UniFrac(weighted=TRUE, normalized=FALSE) qiime2 qiime diversity beta-phylogenetic --p-metric weighted_unifrac \\begin{align*} W &= \\sum_{= 1}^{n} L_i|\\frac{A_i}{A_T} - \\frac{B_i}{B_T}|  \\\\ \\\\ W &= L_1|\\frac{A_1}{A_T} - \\frac{B_1}{B_T}| + L_2|\\frac{A_2}{A_T} - \\frac{B_2}{B_T}| + \\cdots + L_n|\\frac{A_n}{A_T} - \\frac{B_n}{B_T}|  \\\\ \\\\ W &= 0.2|\\frac{9}{15} - \\frac{7}{15}| + 0.4|\\frac{0}{15} - \\frac{5}{15}| + \\cdots + 0.3|\\frac{3}{15} - \\frac{0}{15}|  \\\\ \\\\ W &= 0.02\\overline{6} + 0.1\\overline{3} + 0.05\\overline{3} + 0.1\\overline{3} + 0.42 + 0.08 + 0.2\\overline{3} + 0.06  \\\\ \\\\ W &= 1.14 \\end{align*}","code":""},{"path":"https://cmmr.github.io/ecodive/articles/unifrac.html","id":"normalized","dir":"Articles","previous_headings":"","what":"Normalized","title":"UniFrac Calculations","text":"Lozupone et al, 2007: Normalized Weighted UniFrac R Package ecodive: weighted_normalized_unifrac() R Package abdiv: weighted_normalized_unifrac() R Package phyloseq: UniFrac(weighted=TRUE, normalized=TRUE) qiime2 qiime diversity beta-phylogenetic --p-metric weighted_normalized_unifrac mothur: unifrac.weighted() \\begin{align*}  N &= \\displaystyle \\frac   {\\sum_{= 1}^{n} L_i|\\frac{A_i}{A_T} - \\frac{B_i}{B_T}|}   {\\sum_{= 1}^{n} L_i(\\frac{A_i}{A_T} + \\frac{B_i}{B_T})}   \\\\ \\\\    N &= \\displaystyle \\frac   {L_1|\\frac{A_1}{A_T} - \\frac{B_1}{B_T}| + L_2|\\frac{A_2}{A_T} - \\frac{B_2}{B_T}| + \\cdots + L_n|\\frac{A_n}{A_T} - \\frac{B_n}{B_T}|}   {L_1(\\frac{A_1}{A_T} + \\frac{B_1}{B_T}) + L_2(\\frac{A_2}{A_T} + \\frac{B_2}{B_T}) + \\cdots + L_n(\\frac{A_n}{A_T} + \\frac{B_n}{B_T})}   \\\\ \\\\    N &= \\displaystyle \\frac   {0.2|\\frac{9}{15} - \\frac{7}{15}| + 0.4|\\frac{0}{15} - \\frac{5}{15}| + \\cdots + 0.3|\\frac{3}{15} - \\frac{0}{15}|}   {0.2(\\frac{9}{15} + \\frac{7}{15}) + 0.4(\\frac{0}{15} + \\frac{5}{15}) + \\cdots + 0.3(\\frac{3}{15} + \\frac{0}{15})}   \\\\ \\\\    N &= \\displaystyle \\frac   {0.02\\overline{6} + 0.1\\overline{3} + 0.05\\overline{3} + 0.1\\overline{3} + 0.42 + 0.08 + 0.2\\overline{3} + 0.06}   {0.21\\overline{3} + 0.1\\overline{3} + 0.05\\overline{3} + 0.1\\overline{3} + 0.66 + 0.56 + 0.51\\overline{3} + 0.06}   \\\\ \\\\    N &= \\displaystyle \\frac{1.14}{2.326667}  \\\\ \\\\ N &= 0.4899713 \\end{align*}","code":""},{"path":"https://cmmr.github.io/ecodive/articles/unifrac.html","id":"generalized","dir":"Articles","previous_headings":"","what":"Generalized","title":"UniFrac Calculations","text":"Chen et al. 2012: Generalized UniFrac R Package ecodive: generalized_unifrac(alpha = 0.5) R Package abdiv: generalized_unifrac(alpha = 0.5) R Package GUniFrac: GUniFrac(alpha = 0.5) qiime2 qiime diversity beta-phylogenetic --p-metric generalized_unifrac -0.5 \\begin{align*}  G &= \\displaystyle \\frac   {\\sum_{= 1}^{n} L_i(\\frac{A_i}{A_T} + \\frac{B_i}{B_T})^{\\alpha}     |\\displaystyle \\frac       {\\frac{A_i}{A_T} - \\frac{B_i}{B_T}}       {\\frac{A_i}{A_T} + \\frac{B_i}{B_T}} |}   {\\sum_{= 1}^{n} L_i(\\frac{A_i}{A_T} + \\frac{B_i}{B_T})^{\\alpha}}  \\\\ \\\\  G &= \\displaystyle \\frac   {     L_1(\\frac{A_1}{A_T} + \\frac{B_1}{B_T})^{0.5}       |\\displaystyle \\frac         {\\frac{A_1}{A_T} - \\frac{B_1}{B_T}}         {\\frac{A_1}{A_T} + \\frac{B_1}{B_T}}| +     \\cdots +     L_n(\\frac{A_n}{A_T} + \\frac{B_n}{B_T})^{0.5}       |\\displaystyle \\frac         {\\frac{A_n}{A_T} - \\frac{B_n}{B_T}}         {\\frac{A_n}{A_T} + \\frac{B_n}{B_T}}|   }{     L_1(\\frac{A_1}{A_T} + \\frac{B_1}{B_T})^{0.5} +     \\cdots +     L_n(\\frac{A_n}{A_T} + \\frac{B_n}{B_T})^{0.5}   }     \\\\ \\\\  G &= \\displaystyle \\frac   {     0.2(\\frac{9}{15} + \\frac{7}{15})^{0.5}       |\\displaystyle \\frac         {\\frac{9}{15} - \\frac{7}{15}}         {\\frac{9}{15} + \\frac{7}{15}}| +     \\cdots +     0.3(\\frac{3}{15} + \\frac{0}{15})^{0.5}       |\\displaystyle \\frac         {\\frac{3}{15} - \\frac{0}{15}}         {\\frac{3}{15} + \\frac{0}{15}}|   }{     0.2(\\frac{9}{15} + \\frac{7}{15})^{0.5} +     \\cdots +     0.3(\\frac{3}{15} + \\frac{0}{15})^{0.5}   }     \\\\ \\\\    G &\\approx \\displaystyle \\frac   {0.03 + 0.23 + 0.21 + 0.26 + 0.49 + 0.08 + 0.27 + 0.13}   {0.21 + 0.23 + 0.21 + 0.26 + 0.77 + 0.58 + 0.60 + 0.13}   \\\\ \\\\    G &= \\displaystyle \\frac{1.701419}{2.986235}  \\\\ \\\\ G &= 0.569754  \\end{align*}","code":""},{"path":"https://cmmr.github.io/ecodive/articles/unifrac.html","id":"variance-adjusted","dir":"Articles","previous_headings":"","what":"Variance Adjusted","title":"UniFrac Calculations","text":"Chang et al, 2011: Variance Adjusted Weighted (VAW) UniFrac R Package ecodive: variance_adjusted_unifrac() R Package abdiv: variance_adjusted_unifrac() qiime2 qiime diversity beta-phylogenetic --p-metric weighted_normalized_unifrac --p-variance-adjusted \\begin{align*}  V &= \\displaystyle \\frac   {\\sum_{= 1}^{n} L_i\\displaystyle \\frac     {|\\frac{A_i}{A_T} - \\frac{B_i}{B_T}|}     {\\sqrt{(A_i + B_i)(A_T + B_T - A_i - B_i)}} }   {\\sum_{= 1}^{n} L_i\\displaystyle \\frac     {\\frac{A_i}{A_T} + \\frac{B_i}{B_T}}     {\\sqrt{(A_i + B_i)(A_T + B_T - A_i - B_i)}} }  \\\\ \\\\  V &= \\displaystyle \\frac   {     L_1\\displaystyle \\frac     {|\\frac{A_1}{A_T} - \\frac{B_1}{B_T}|}     {\\sqrt{(A_1 + B_1)(A_T + B_T - A_1 - B_1)}} +     \\cdots +     L_n\\displaystyle \\frac     {|\\frac{A_n}{A_T} - \\frac{B_n}{B_T}|}     {\\sqrt{(A_n + B_n)(A_T + B_T - A_n - B_n)}}   }{     L_1\\displaystyle \\frac     {\\frac{A_1}{A_T} + \\frac{B_1}{B_T}}     {\\sqrt{(A_1 + B_1)(A_T + B_T - A_1 - B_1)}} +     \\cdots +     L_n\\displaystyle \\frac     {\\frac{A_n}{A_T} + \\frac{B_n}{B_T}}     {\\sqrt{(A_n + B_n)(A_T + B_T - A_n - B_n)}}   }     \\\\ \\\\  V &= \\displaystyle \\frac   {     0.2\\displaystyle \\frac     {|\\frac{9}{15} - \\frac{7}{15}|}     {\\sqrt{(9 + 7)(15 + 15 - 9 - 7)}} +     \\cdots +     0.3\\displaystyle \\frac     {|\\frac{3}{15} - \\frac{0}{15}|}     {\\sqrt{(3 + 0)(15 + 15 - 3 - 0)}}   }{     0.2\\displaystyle \\frac     {\\frac{9}{15} + \\frac{7}{15}}     {\\sqrt{(9 + 7)(15 + 15 - 9 - 7)}} +     \\cdots +     0.3\\displaystyle \\frac     {\\frac{3}{15} + \\frac{0}{15}}     {\\sqrt{(3 + 0)(15 + 15 - 3 - 0)}}   }     \\\\ \\\\    V &\\approx \\displaystyle \\frac   {0.002 + 0.012 + 0.010 + 0.013 + 0.029 + 0.005 + 0.016 + 0.007}   {0.014 + 0.012 + 0.010 + 0.013 + 0.046 + 0.037 + 0.036 + 0.007}   \\\\ \\\\    V &= \\displaystyle \\frac{4.09389}{4.174402}  \\\\ \\\\ V &= 0.9807128  \\end{align*}","code":""},{"path":"https://cmmr.github.io/ecodive/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel P. Smith. Author, maintainer. Alkek Center Metagenomics Microbiome Research. Copyright holder, funder.","code":""},{"path":"https://cmmr.github.io/ecodive/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith D (2025). ecodive: Fast Implementations Ecological Diversity Metrics. R package version 0.0.90, https://cmmr.github.io/ecodive/.","code":"@Manual{,   title = {ecodive: Fast Implementations of Ecological Diversity Metrics},   author = {Daniel P. Smith},   year = {2025},   note = {R package version 0.0.90},   url = {https://cmmr.github.io/ecodive/}, }"},{"path":"https://cmmr.github.io/ecodive/index.html","id":"ecodive","dir":"","previous_headings":"","what":"Fast Implementations of Ecological Diversity Metrics","title":"Fast Implementations of Ecological Diversity Metrics","text":"ecodive provides fastest implementations alpha beta diversity metrics R, including UniFrac, Faith’s PD, Bray-Curtis, Shannon, many others. works matrix-like object, including phyloseq, rbiom, BioConductor data structures. zero dependencies, ’s quick install ideal end users package developers alike.","code":""},{"path":"https://cmmr.github.io/ecodive/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast Implementations of Ecological Diversity Metrics","text":"latest stable version can installed CRAN. development version available GitHub.","code":"install.packages('ecodive') install.packages('pak') pak::pak('cmmr/ecodive')"},{"path":"https://cmmr.github.io/ecodive/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Fast Implementations of Ecological Diversity Metrics","text":"","code":"## Example Data ----------------------  counts <- rarefy(ex_counts) counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  309    6     1 #> Bacteroides            2    2    0   341 #> Corynebacterium        0    0  171     1 #> Haemophilus          180   34    0     1 #> Propionibacterium      1    0   82     0 #> Staphylococcus         0    0   86     1   ## Alpha Diversity -------------------  shannon(counts) #>     Saliva       Gums       Nose      Stool  #> 0.74119910 0.35692121 1.10615349 0.07927797   faith(counts, tree = ex_tree) #> Saliva   Gums   Nose  Stool  #>    180    155    101    202    ## Beta Diversity --------------------  bray_curtis(counts) #>          Saliva      Gums      Nose #> Gums  0.4260870                     #> Nose  0.9797101 0.9826087           #> Stool 0.9884058 0.9884058 0.9913043  weighted_unifrac(counts, tree = ex_tree) #>          Saliva      Gums      Nose #> Gums   36.97681                     #> Nose   67.23768  55.97101           #> Stool 109.77971 109.44058 110.00870"},{"path":"https://cmmr.github.io/ecodive/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Fast Implementations of Ecological Diversity Metrics","text":"online manual ecodive available https://cmmr.github.io/ecodive/. includes getting started guide, articles alpha/beta diversity, reference pages function.","code":""},{"path":"https://cmmr.github.io/ecodive/index.html","id":"automated-tests","dir":"","previous_headings":"","what":"Automated tests","title":"Fast Implementations of Ecological Diversity Metrics","text":"following commands check ecodive passes bundled testing suite.","code":"install.packages('testthat') testthat::test_check('ecodive')"},{"path":[]},{"path":"https://cmmr.github.io/ecodive/index.html","id":"support","dir":"","previous_headings":"Community guidelines","what":"Support","title":"Fast Implementations of Ecological Diversity Metrics","text":"Bug reports, feature requests, general questions can submitted https://github.com/cmmr/ecodive/issues.","code":""},{"path":"https://cmmr.github.io/ecodive/index.html","id":"contributing","dir":"","previous_headings":"Community guidelines","what":"Contributing","title":"Fast Implementations of Ecological Diversity Metrics","text":"Pull requests welcome. Please ensure contributed code covered tests documentation (add additional tests documentation needed) passes automated tests. New functions leverage C pthreads minimize memory CPU time. Please note ecodive project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/bray_curtis.html","id":null,"dir":"Reference","previous_headings":"","what":"Bray-Curtis — bray_curtis","title":"Bray-Curtis — bray_curtis","text":"Bray-Curtis beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/bray_curtis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bray-Curtis — bray_curtis","text":"","code":"bray_curtis(counts, weighted = TRUE, pairs = NULL, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/bray_curtis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bray-Curtis — bray_curtis","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. weighted TRUE, algorithm takes relative abundances account. FALSE, presence/absence considered. pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/bray_curtis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bray-Curtis — bray_curtis","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/bray_curtis.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Bray-Curtis — bray_curtis","text":"formulas , x y two columns (samples) counts. n number rows (OTUs) counts. $$D = \\displaystyle \\frac{\\sum_{= 1}^{n} |x_i - y_i|}{\\sum_{= 1}^{n} (x_i + y_i)}$$","code":"x <- c(4, 0, 3, 2, 6)   y <- c(0, 8, 0, 0, 5)   sum(abs(x-y)) / sum(x+y)   #>  0.6428571"},{"path":"https://cmmr.github.io/ecodive/reference/bray_curtis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bray-Curtis — bray_curtis","text":"Sorenson T 1948. method establishing groups equal amplitude plant sociology based similarity species content. Kongelige Danske Videnskabernes Selskab, 5.","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/bray_curtis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bray-Curtis — bray_curtis","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Bray-Curtis weighted distance matrix     bray_curtis(ex_counts) #>          Saliva      Gums      Nose #> Gums  0.5905768                     #> Nose  0.9601770 0.9704797           #> Stool 0.9916667 0.9906729 0.9926199          # Bray-Curtis unweighted distance matrix     bray_curtis(ex_counts, weighted = FALSE) #>           Saliva       Gums       Nose #> Gums  0.11111111                       #> Nose  0.20000000 0.09090909            #> Stool 0.33333333 0.20000000 0.09090909          # Only calculate distances for A vs all.     bray_curtis(ex_counts, pairs = 1:3) #>          Saliva      Gums      Nose #> Gums  0.5905768                     #> Nose  0.9601770        NA           #> Stool 0.9916667        NA        NA"},{"path":"https://cmmr.github.io/ecodive/reference/canberra.html","id":null,"dir":"Reference","previous_headings":"","what":"Canberra — canberra","title":"Canberra — canberra","text":"Canberra beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/canberra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Canberra — canberra","text":"","code":"canberra(counts, weighted = TRUE, pairs = NULL, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/canberra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Canberra — canberra","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. weighted TRUE, algorithm takes relative abundances account. FALSE, presence/absence considered. pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/canberra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Canberra — canberra","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/canberra.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Canberra — canberra","text":"formulas , x y two columns (samples) counts. n number rows (OTUs) counts. OTUs must removed absent samples. $$D = \\displaystyle \\frac{1}{n}\\sum_{= 1}^{n} \\frac{|x_i - y_i|}{x_i + y_i}$$","code":"x <- c(4, 0, 3, 0, 6)[-4]   y <- c(0, 8, 0, 0, 5)[-4]   sum(abs(x-y) / (x+y)) / length(x)   #>  0.7727273"},{"path":"https://cmmr.github.io/ecodive/reference/canberra.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Canberra — canberra","text":"Lance, Godfrey LN, Williams WT 1967. general theory classificatory sorting strategies II. Clustering systems. computer journal, 10(3). doi:10.1093/comjnl/10.3.271","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/canberra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Canberra — canberra","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Gower weighted distance matrix     canberra(ex_counts) #>          Saliva      Gums      Nose #> Gums  0.4684762                     #> Nose  0.7884925 0.8696711           #> Stool 0.9950258 0.8269576 0.8712341          # Gower unweighted distance matrix     canberra(ex_counts, weighted = FALSE) #>          Saliva      Gums      Nose #> Gums  0.2000000                     #> Nose  0.3333333 0.1666667           #> Stool 0.5000000 0.3333333 0.1666667          # Only calculate distances for A vs all.     canberra(ex_counts, pairs = 1:3) #>          Saliva      Gums      Nose #> Gums  0.4684762                     #> Nose  0.7884925        NA           #> Stool 0.9950258        NA        NA"},{"path":"https://cmmr.github.io/ecodive/reference/chao1.html","id":null,"dir":"Reference","previous_headings":"","what":"Chao1 — chao1","title":"Chao1 — chao1","text":"Chao1 alpha diversity metric. non-parametric estimator number unobserved species sample. Chao1 index estimates total species richness based number species occur (singletons) twice (doubletons) sample.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/chao1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chao1 — chao1","text":"","code":"chao1(counts, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/chao1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chao1 — chao1","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/chao1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chao1 — chao1","text":"numeric vector.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/chao1.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Chao1 — chao1","text":"Prerequisite: counts whole numbers. formulas , x single column (sample) counts. \\(n\\) total number non-zero OTUs, \\(\\) number singletons, \\(b\\) number doubletons. $$D = \\displaystyle n + \\frac{^{2}}{2b}$$   Note \\(x\\) singletons doubletons (\\(= 0, b = 0\\)), result NaN. \\(x\\) singletons doubletons (\\(> 0, b = 0\\)), result Inf.","code":"x <- c(1, 0, 3, 2, 6)   sum(x>0) + (sum(x==1) ^ 2) / (2 * sum(x==2))   #>  4.5"},{"path":"https://cmmr.github.io/ecodive/reference/chao1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Chao1 — chao1","text":"Chao 1984. Non-parametric estimation number classes population. Scandinavian Journal Statistics, 11:265-270.","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/chao1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chao1 — chao1","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Chao1 diversity values     chao1(ex_counts) #> Saliva   Gums   Nose  Stool  #>    4.5    Inf    6.0    Inf           # Low diversity     chao1(c(100, 1, 1, 1, 1)) # Inf #> [1] Inf          # High diversity     chao1(c(20, 20, 20, 20, 20)) # NaN #> [1] NaN          # Low richness     chao1(1:3) # 3.5 #> [1] 3.5          # High richness     chao1(1:100) # 100.5 #> [1] 100.5"},{"path":"https://cmmr.github.io/ecodive/reference/documentation.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation — documentation","title":"documentation — documentation","text":"documentation","code":""},{"path":"https://cmmr.github.io/ecodive/reference/documentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation — documentation","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. weighted TRUE, algorithm takes relative abundances account. FALSE, presence/absence considered. normalized weighted UniFrac , normalize distances total branch length. Options: TRUE FALSE. alpha much weight give relative abundances; value 0 1, inclusive. Setting alpha=1 equivalent weighted_normalized_unifrac(). tree phylo-class object representing phylogenetic tree OTUs counts. OTU identifiers given colnames(counts) must present tree. Can omitted tree embedded counts object attr(counts, 'tree'). pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/euclidean.html","id":null,"dir":"Reference","previous_headings":"","what":"Euclidean — euclidean","title":"Euclidean — euclidean","text":"Euclidean beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/euclidean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Euclidean — euclidean","text":"","code":"euclidean(counts, weighted = TRUE, pairs = NULL, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/euclidean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Euclidean — euclidean","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. weighted TRUE, algorithm takes relative abundances account. FALSE, presence/absence considered. pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/euclidean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Euclidean — euclidean","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/euclidean.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Euclidean — euclidean","text":"formulas , x y two columns (samples) counts. n number rows (OTUs) counts. $$D = \\displaystyle \\sqrt{\\sum_{= 1}^{n} (x_i - y_i)^{2}}$$","code":"x <- c(4, 0, 3, 2, 6)   y <- c(0, 8, 0, 0, 5)   sqrt(sum((x-y)^2))   #>  9.69536"},{"path":"https://cmmr.github.io/ecodive/reference/euclidean.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Euclidean — euclidean","text":"Legendre P, Caceres M 2013. Beta diversity variance community data: dissimilarity coefficients partitioning. Ecology Letters. 16(8). doi:10.1111/ele.12141","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/euclidean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Euclidean — euclidean","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Euclidean weighted distance matrix     euclidean(ex_counts) #>          Saliva      Gums      Nose #> Gums   637.8205                     #> Nose   646.1300  983.5644           #> Stool  654.8633 1001.5543  858.2296          # Euclidean unweighted distance matrix     euclidean(ex_counts, weighted = FALSE) #>         Saliva     Gums     Nose #> Gums  1.000000                   #> Nose  1.414214 1.000000          #> Stool 1.732051 1.414214 1.000000          # Only calculate distances for A vs all.     euclidean(ex_counts, pairs = 1:3) #>         Saliva     Gums     Nose #> Gums  637.8205                   #> Nose  646.1300       NA          #> Stool 654.8633       NA       NA"},{"path":"https://cmmr.github.io/ecodive/reference/ex_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Example counts matrix — ex_counts","title":"Example counts matrix — ex_counts","text":"Genera found four human body sites.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/ex_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example counts matrix — ex_counts","text":"","code":"ex_counts"},{"path":"https://cmmr.github.io/ecodive/reference/ex_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example counts matrix — ex_counts","text":"matrix 4 samples (columns) x 6 genera (rows).","code":""},{"path":"https://cmmr.github.io/ecodive/reference/ex_counts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example counts matrix — ex_counts","text":"Derived Human Microbiome Project dataset. https://commonfund.nih.gov/hmp","code":""},{"path":"https://cmmr.github.io/ecodive/reference/ex_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Example phylogenetic tree — ex_tree","title":"Example phylogenetic tree — ex_tree","text":"Companion tree ex_counts.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/ex_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example phylogenetic tree — ex_tree","text":"","code":"ex_tree"},{"path":"https://cmmr.github.io/ecodive/reference/ex_tree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example phylogenetic tree — ex_tree","text":"phylo object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/ex_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example phylogenetic tree — ex_tree","text":"ex_tree encodes tree structure:","code":"+----------44---------- Haemophilus   +-2-|   |   +----------------68---------------- Bacteroides   |   |             +---18---- Streptococcus   |      +--12--|   |      |      +--11-- Staphylococcus   +--11--|          |      +-----24----- Corynebacterium          +--12--|                 +--13-- Propionibacterium"},{"path":"https://cmmr.github.io/ecodive/reference/faith.html","id":null,"dir":"Reference","previous_headings":"","what":"Faith's PD — faith","title":"Faith's PD — faith","text":"Faith's phylogenetic diversity metric. higher value indicates greater amount evolutionary history represented within community, suggesting higher biodiversity terms evolutionary relationships.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/faith.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Faith's PD — faith","text":"","code":"faith(counts, tree, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/faith.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Faith's PD — faith","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. tree phylo-class object representing phylogenetic tree OTUs counts. OTU identifiers given colnames(counts) must present tree. Can omitted tree embedded counts object attr(counts, 'tree'). cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/faith.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Faith's PD — faith","text":"numeric vector.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/faith.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Faith's PD — faith","text":"Given \\(n\\) branches lengths \\(L\\) sample's abundances branches coded 1 present 0 absent: $$\\sum_{= 1}^{n} P_i \\times L_i$$","code":""},{"path":"https://cmmr.github.io/ecodive/reference/faith.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Faith's PD — faith","text":"Faith DP 1992. Conservation evaluation phylogenetic diversity. Biological Conservation, 61:1-10. doi:10.1016/0006-3207(92)91201-3","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/faith.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Faith's PD — faith","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Faith diversity values     faith(ex_counts, tree = ex_tree) #> Saliva   Gums   Nose  Stool  #>    180    191    215    202"},{"path":"https://cmmr.github.io/ecodive/reference/generalized_unifrac.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized UniFrac — generalized_unifrac","title":"Generalized UniFrac — generalized_unifrac","text":"Generalized UniFrac beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/generalized_unifrac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized UniFrac — generalized_unifrac","text":"","code":"generalized_unifrac(   counts,   tree = NULL,   alpha = 0.5,   pairs = NULL,   cpus = n_cpus() )"},{"path":"https://cmmr.github.io/ecodive/reference/generalized_unifrac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized UniFrac — generalized_unifrac","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. tree phylo-class object representing phylogenetic tree OTUs counts. OTU identifiers given colnames(counts) must present tree. Can omitted tree embedded counts object attr(counts, 'tree'). alpha much weight give relative abundances; value 0 1, inclusive. Setting alpha=1 equivalent weighted_normalized_unifrac(). pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/generalized_unifrac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized UniFrac — generalized_unifrac","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/generalized_unifrac.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Generalized UniFrac — generalized_unifrac","text":"Given \\(n\\) branches lengths \\(L\\), pair samples' abundances (\\(\\) \\(B\\)) branches, abundance weighting \\(0 \\le \\alpha \\le 1\\): $$D = \\displaystyle \\frac{\\sum_{= 1}^{n} L_i(\\frac{A_i}{A_T} + \\frac{B_i}{B_T})^{\\alpha}|\\displaystyle \\frac{\\frac{A_i}{A_T} - \\frac{B_i}{B_T}}{\\frac{A_i}{A_T} + \\frac{B_i}{B_T}} |}{\\sum_{= 1}^{n} L_i(\\frac{A_i}{A_T} + \\frac{B_i}{B_T})^{\\alpha}}$$ See vignette('unifrac') details worked example.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/generalized_unifrac.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized UniFrac — generalized_unifrac","text":"Chen J, Bittinger K, Charlson ES, Hoffmann C, Lewis J, Wu GD, Collman RG, Bushman FD, Li H 2012. Associating microbiome composition environmental covariates using generalized UniFrac distances. Bioinformatics, 28(16). doi:10.1093/bioinformatics/bts342","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/generalized_unifrac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized UniFrac — generalized_unifrac","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Generalized UniFrac distance matrix     generalized_unifrac(ex_counts, tree = ex_tree) #>          Saliva      Gums      Nose #> Gums  0.4471644                     #> Nose  0.8215129 0.7607876           #> Stool 0.9727827 0.9784242 0.9730332          # Only calculate distances for A vs all.     generalized_unifrac(ex_counts, tree = ex_tree, pairs = 1:3) #>          Saliva      Gums      Nose #> Gums  0.4471644                     #> Nose  0.8215129        NA           #> Stool 0.9727827        NA        NA"},{"path":"https://cmmr.github.io/ecodive/reference/gower.html","id":null,"dir":"Reference","previous_headings":"","what":"Gower — gower","title":"Gower — gower","text":"Gower beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/gower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gower — gower","text":"","code":"gower(counts, weighted = TRUE, pairs = NULL, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/gower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gower — gower","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. weighted TRUE, algorithm takes relative abundances account. FALSE, presence/absence considered. pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/gower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gower — gower","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/gower.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Gower — gower","text":"row (OTU) counts rescaled range 0-1. cases row value, values replaced 0.   formulas , x y two columns (samples) scaled counts. n number rows (OTUs) counts. $$D = \\displaystyle \\frac{1}{n}\\sum_{= 1}^{n} |x_i - y_i|$$","code":"counts                 scaled recounts      A B C  D                 A   B   C D OTU1 0 0 0  0    ->    OTU1 0.0 0.0 0.0 0 OTU2 0 8 9 10    ->    OTU2 0.0 0.8 0.9 1 OTU3 5 5 5  5    ->    OTU3 0.0 0.0 0.0 0 OTU4 2 0 0  0    ->    OTU4 1.0 0.0 0.0 0 OTU5 4 6 4  1    ->    OTU5 0.6 1.0 0.6 0 x <- c(0, 0, 0, 1, 0.6)   y <- c(0, 0.8, 0, 0, 1)   sum(abs(x-y)) / length(x)   #>  0.44"},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/gower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gower — gower","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Gower weighted distance matrix     gower(ex_counts) #>          Saliva      Gums      Nose #> Gums  0.2206319                     #> Nose  0.6945328 0.7405680           #> Stool 0.3689187 0.4138592 0.6709761          # Gower unweighted distance matrix     gower(ex_counts, weighted = FALSE) #>          Saliva      Gums      Nose #> Gums  0.3333333                     #> Nose  0.3333333 0.3333333           #> Stool 1.0000000 0.6666667 0.6666667          # Only calculate distances for A vs all.     gower(ex_counts, pairs = 1:3) #>          Saliva      Gums      Nose #> Gums  0.2206319                     #> Nose  0.6945328        NA           #> Stool 0.3689187        NA        NA"},{"path":"https://cmmr.github.io/ecodive/reference/inv_simpson.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse Simpson — inv_simpson","title":"Inverse Simpson — inv_simpson","text":"Inverse Simpson alpha diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/inv_simpson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse Simpson — inv_simpson","text":"","code":"inv_simpson(counts, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/inv_simpson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse Simpson — inv_simpson","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/inv_simpson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse Simpson — inv_simpson","text":"numeric vector.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/inv_simpson.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Inverse Simpson — inv_simpson","text":"Pre-transformation: drop OTUs zero abundance. formulas , \\(x\\) single column (sample) counts. \\(p\\) relative abundances. $$p_{} = \\displaystyle \\frac{x_i}{\\sum x}$$ $$D = \\displaystyle 1 / \\sum_{= 1}^{n} p_{}\\times\\ln(p_{})$$","code":"x <- c(4, 0, 3, 2, 6)[-2]   p <- x / sum(x)   1 / sum(p * log(p))   #>  -0.7636352"},{"path":"https://cmmr.github.io/ecodive/reference/inv_simpson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inverse Simpson — inv_simpson","text":"Simpson EH 1949. Measurement diversity. Nature, 163. doi:10.1038/163688a0","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/inv_simpson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse Simpson — inv_simpson","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Inverse Simpson diversity values     inv_simpson(ex_counts) #>   Saliva     Gums     Nose    Stool  #> 2.029446 1.233425 2.783607 1.013125           # Low diversity     inv_simpson(c(100, 1, 1, 1, 1)) # 1.08 #> [1] 1.081168          # High diversity     inv_simpson(c(20, 20, 20, 20, 20)) # 5 #> [1] 5          # Low richness     inv_simpson(1:3) # 2.57 #> [1] 2.571429          # High richness     inv_simpson(1:100) # 75.37 #> [1] 75.37313"},{"path":"https://cmmr.github.io/ecodive/reference/jaccard.html","id":null,"dir":"Reference","previous_headings":"","what":"Jaccard — jaccard","title":"Jaccard — jaccard","text":"Jaccard beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/jaccard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jaccard — jaccard","text":"","code":"jaccard(counts, weighted = TRUE, pairs = NULL, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/jaccard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jaccard — jaccard","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. weighted TRUE, algorithm takes relative abundances account. FALSE, presence/absence considered. pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/jaccard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jaccard — jaccard","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/jaccard.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Jaccard — jaccard","text":"formulas , x y two columns (samples) counts. n number rows (OTUs) counts. $$b = \\displaystyle \\frac{\\sum_{= 1}^{n} |x_i - y_i|}{\\sum_{= 1}^{n} x_i + y_i}$$ $$D = \\displaystyle \\frac{2b}{1 + b}$$","code":"x <- c(4, 0, 3, 2, 6)   y <- c(0, 8, 0, 0, 5)   bray <- sum(abs(x-y)) / sum(x+y)   2 * bray / (1 + bray)   #>  0.7826087"},{"path":"https://cmmr.github.io/ecodive/reference/jaccard.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Jaccard — jaccard","text":"Jaccard P 1908. Nouvellesrecherches sur la distribution florale. Bulletin de la Societe Vaudoise des Sciences Naturelles, 44(163). doi:10.5169/seals-268384","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/jaccard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jaccard — jaccard","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Jaccard weighted distance matrix     jaccard(ex_counts) #>          Saliva      Gums      Nose #> Gums  0.7425945                     #> Nose  0.9796840 0.9850187           #> Stool 0.9958159 0.9953146 0.9962963          # Jaccard unweighted distance matrix     jaccard(ex_counts, weighted = FALSE) #>          Saliva      Gums      Nose #> Gums  0.2000000                     #> Nose  0.3333333 0.1666667           #> Stool 0.5000000 0.3333333 0.1666667          # Only calculate distances for A vs all.     jaccard(ex_counts, pairs = 1:3) #>          Saliva      Gums      Nose #> Gums  0.7425945                     #> Nose  0.9796840        NA           #> Stool 0.9958159        NA        NA"},{"path":"https://cmmr.github.io/ecodive/reference/kulczynski.html","id":null,"dir":"Reference","previous_headings":"","what":"Kulczynski — kulczynski","title":"Kulczynski — kulczynski","text":"Kulczynski beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/kulczynski.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kulczynski — kulczynski","text":"","code":"kulczynski(counts, weighted = TRUE, pairs = NULL, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/kulczynski.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kulczynski — kulczynski","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. weighted TRUE, algorithm takes relative abundances account. FALSE, presence/absence considered. pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/kulczynski.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kulczynski — kulczynski","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/kulczynski.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Kulczynski — kulczynski","text":"formulas , x y two columns (samples) counts. n number rows (OTUs) counts. $$t = \\displaystyle \\sum_{= 1}^{n} min(x_i,y_i)$$ $$D = \\displaystyle 1 - 0.5(\\frac{t}{\\sum_{= 1}^{n} x_i} + \\frac{t}{\\sum_{= 1}^{n} y_i})$$","code":"x <- c(4, 0, 3, 2, 6)   y <- c(0, 8, 0, 0, 5)   t <- sum(pmin(x,y))   1 - (t/sum(x) + t/sum(y)) / 2   #>  0.6410256"},{"path":"https://cmmr.github.io/ecodive/reference/kulczynski.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kulczynski — kulczynski","text":"Kulcynski S 1927. Die Pflanzenassoziationen der Pieninen. Bulletin International de l'Academie Polonaise des Sciences et des Lettres. Classe des Sciences Mathematiques et Naturelles.","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/kulczynski.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kulczynski — kulczynski","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Kulczynski weighted distance matrix     kulczynski(ex_counts) #>          Saliva      Gums      Nose #> Gums  0.4925704                     #> Nose  0.9475164 0.9703510           #> Stool 0.9909509 0.9903586 0.9921546          # Kulczynski unweighted distance matrix     kulczynski(ex_counts, weighted = FALSE) #>           Saliva       Gums       Nose #> Gums  0.10000000                       #> Nose  0.16666667 0.08333333            #> Stool 0.32500000 0.20000000 0.08333333          # Only calculate distances for A vs all.     kulczynski(ex_counts, pairs = 1:3) #>          Saliva      Gums      Nose #> Gums  0.4925704                     #> Nose  0.9475164        NA           #> Stool 0.9909509        NA        NA"},{"path":"https://cmmr.github.io/ecodive/reference/manhattan.html","id":null,"dir":"Reference","previous_headings":"","what":"Manhattan — manhattan","title":"Manhattan — manhattan","text":"Manhattan beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/manhattan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manhattan — manhattan","text":"","code":"manhattan(counts, weighted = TRUE, pairs = NULL, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/manhattan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manhattan — manhattan","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. weighted TRUE, algorithm takes relative abundances account. FALSE, presence/absence considered. pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/manhattan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manhattan — manhattan","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/manhattan.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Manhattan — manhattan","text":"formulas , x y two columns (samples) counts. n number rows (OTUs) counts. $$D = \\displaystyle \\sum_{= 1}^{n} |x_i - y_i|$$","code":"x <- c(4, 0, 3, 2, 6)   y <- c(0, 8, 0, 0, 5)   sum(abs(x-y))   #>  18"},{"path":"https://cmmr.github.io/ecodive/reference/manhattan.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Manhattan — manhattan","text":"Paul EB 2006. Manhattan distance. Dictionary Algorithms Data Structures. https://xlinux.nist.gov/dads/HTML/manhattanDistance.html","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/manhattan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manhattan — manhattan","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Manhattan weighted distance matrix     manhattan(ex_counts) #>       Saliva Gums Nose #> Gums     727           #> Nose    1302 1841      #> Stool    952 1487 1614          # Manhattan unweighted distance matrix     manhattan(ex_counts, weighted = FALSE) #>       Saliva Gums Nose #> Gums       1           #> Nose       2    1      #> Stool      3    2    1          # Only calculate distances for A vs all.     manhattan(ex_counts, pairs = 1:3) #>       Saliva Gums Nose #> Gums     727           #> Nose    1302   NA      #> Stool    952   NA   NA"},{"path":"https://cmmr.github.io/ecodive/reference/n_cpus.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of CPU Cores — n_cpus","title":"Number of CPU Cores — n_cpus","text":"thin wrapper around parallel::detectCores(.tests = TRUE, logical = TRUE) falls back 1 number CPU cores detected, system support pthreads. Consider using parallely::availableCores() place n_cpus() advanced interrogation system resources.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/n_cpus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of CPU Cores — n_cpus","text":"","code":"n_cpus()"},{"path":"https://cmmr.github.io/ecodive/reference/n_cpus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of CPU Cores — n_cpus","text":"scalar integer, guaranteed least 1.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/n_cpus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of CPU Cores — n_cpus","text":"","code":"n_cpus() #> [1] 4"},{"path":"https://cmmr.github.io/ecodive/reference/rarefy.html","id":null,"dir":"Reference","previous_headings":"","what":"Rarefy OTU counts. — rarefy","title":"Rarefy OTU counts. — rarefy","text":"Sub-sample OTU observations samples equal number. called data non-integer abundances, values re-scaled integers 1 depth sum depth.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/rarefy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rarefy OTU counts. — rarefy","text":"","code":"rarefy(   counts,   depth = 0.1,   n_samples = NULL,   seed = 0,   times = NULL,   cpus = n_cpus() )"},{"path":"https://cmmr.github.io/ecodive/reference/rarefy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rarefy OTU counts. — rarefy","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. depth many observations keep per sample. 0 < depth < 1, taken minimum percentage dataset's observations keep. Ignored n_samples specified. Default: 0.1 n_samples number samples keep. 0 < n_samples < 1, taken percentage samples keep. negative, number samples dropped. 0, samples kept. NULL, depth used instead. Default: NULL seed integer seed randomizing observations keep drop. need create different random rarefactions data, set seed different number time. times many independent rarefactions perform. set, rarefy() return list matrices. seeds matrix sequential, starting seed. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/rarefy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rarefy OTU counts. — rarefy","text":"integer matrix.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/rarefy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rarefy OTU counts. — rarefy","text":"","code":"# Create an OTU matrix with 4 samples (A-D) and 5 OTUs.     counts <- matrix(       data     = c(4,0,3,2,6,0,8,0,0,5,0,9,0,0,7,0,10,0,0,1),       nrow     = 5,       dimnames = list(paste0('OTU', 1:5), LETTERS[1:4]) )     counts #>      A B C  D #> OTU1 4 0 0  0 #> OTU2 0 8 9 10 #> OTU3 3 0 0  0 #> OTU4 2 0 0  0 #> OTU5 6 5 7  1     colSums(counts) #>  A  B  C  D  #> 15 13 16 11           counts <- rarefy(counts, depth = 14)     counts #>      A B C D #> OTU1 4 0 0 0 #> OTU2 0 0 9 0 #> OTU3 3 0 0 0 #> OTU4 2 0 0 0 #> OTU5 5 0 5 0     colSums(counts) #>  A  B  C  D  #> 14  0 14  0"},{"path":"https://cmmr.github.io/ecodive/reference/read_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a newick formatted phylogenetic tree. — read_tree","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"phylogenetic tree required computing UniFrac distance matrices. can load tree file providing tree string directly. tree must Newick format, also known parenthetic format New Hampshire format.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/read_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"","code":"read_tree(newick, underscores = FALSE)"},{"path":"https://cmmr.github.io/ecodive/reference/read_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"newick Input data either file path, URL, Newick string. Compressed (gzip bzip2) files also supported. underscores TRUE, underscores unquoted names remain underscores. FALSE, underscores unquoted named converted spaces.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/read_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"phylo class object representing tree.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/read_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"","code":"tree <- read_tree(\"         (A:0.99,((B:0.87,C:0.89):0.51,(((D:0.16,(E:0.83,F:0.96)         :0.94):0.69,(G:0.92,(H:0.62,I:0.85):0.54):0.23):0.74,J:0.1         2):0.43):0.67);\")     class(tree) #> [1] \"phylo\""},{"path":"https://cmmr.github.io/ecodive/reference/shannon.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon — shannon","title":"Shannon — shannon","text":"Shannon alpha diversity metric. index considers number different OTUs (richness) evenly observations distributed among OTUs (evenness).","code":""},{"path":"https://cmmr.github.io/ecodive/reference/shannon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon — shannon","text":"","code":"shannon(counts, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/shannon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon — shannon","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/shannon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon — shannon","text":"numeric vector.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/shannon.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Shannon — shannon","text":"Pre-transformation: drop OTUs zero abundance. formulas , \\(x\\) single column (sample) counts. \\(p_i\\) proportion \\(\\)-th OTU total community. $$p_{} = \\displaystyle \\frac{x_i}{\\sum x}$$ $$D = \\displaystyle -\\sum_{= 1}^{n} p_{}\\times\\ln(p_{})$$","code":"x <- c(4, 0, 3, 2, 6)[-2]   p <- x / sum(x)   -sum(p * log(p))   #>  1.309526"},{"path":"https://cmmr.github.io/ecodive/reference/shannon.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shannon — shannon","text":"Shannon CE, Weaver W 1949. Mathematical Theory Communication. University Illinois Press.","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/shannon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shannon — shannon","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Shannon diversity values     shannon(ex_counts) #>     Saliva       Gums       Nose      Stool  #> 0.74119910 0.36684449 1.14222899 0.04824952           # Low diversity     shannon(c(100, 1, 1, 1, 1)) # 0.22 #> [1] 0.2163426          # High diversity     shannon(c(20, 20, 20, 20, 20)) # 1.61 #> [1] 1.609438          # Low richness     shannon(1:3) # 1.01 #> [1] 1.011404          # High richness     shannon(1:100) # 4.42 #> [1] 4.416898"},{"path":"https://cmmr.github.io/ecodive/reference/simpson.html","id":null,"dir":"Reference","previous_headings":"","what":"Simpson — simpson","title":"Simpson — simpson","text":"Simpson alpha diversity metric. Gauges uniformity species within community. Simpson index 0 indicates one high abundance OTUs dominate community, indicative low diversity.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/simpson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simpson — simpson","text":"","code":"simpson(counts, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/simpson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simpson — simpson","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/simpson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simpson — simpson","text":"numeric vector.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/simpson.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Simpson — simpson","text":"Pre-transformation: drop OTUs zero abundance. formulas , \\(x\\) single column (sample) counts. \\(p\\) relative abundances. $$p_{} = \\displaystyle \\frac{x_i}{\\sum x}$$ $$D = \\displaystyle 1 - \\sum_{= 1}^{n} p_{}\\times\\ln(p_{})$$","code":"x <- c(4, 0, 3, 2, 6)[-2]   p <- x / sum(x)   1 - sum(p * log(p))   #>  2.309526"},{"path":"https://cmmr.github.io/ecodive/reference/simpson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simpson — simpson","text":"Simpson EH 1949. Measurement diversity. Nature, 163. doi:10.1038/163688a0","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/simpson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simpson — simpson","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Simpson diversity values     simpson(ex_counts) #>     Saliva       Gums       Nose      Stool  #> 0.50725478 0.18924937 0.64075388 0.01295525           # Low diversity     simpson(c(100, 1, 1, 1, 1)) # 0.075 #> [1] 0.07507396          # High diversity     simpson(c(20, 20, 20, 20, 20)) # 0.8 #> [1] 0.8          # Low richness     simpson(1:3) # 0.61 #> [1] 0.6111111          # High richness     simpson(1:100) # 0.99 #> [1] 0.9867327"},{"path":"https://cmmr.github.io/ecodive/reference/unweighted_unifrac.html","id":null,"dir":"Reference","previous_headings":"","what":"Unweighted UniFrac — unweighted_unifrac","title":"Unweighted UniFrac — unweighted_unifrac","text":"Unweighted UniFrac beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/unweighted_unifrac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unweighted UniFrac — unweighted_unifrac","text":"","code":"unweighted_unifrac(counts, tree = NULL, pairs = NULL, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/unweighted_unifrac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unweighted UniFrac — unweighted_unifrac","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. tree phylo-class object representing phylogenetic tree OTUs counts. OTU identifiers given colnames(counts) must present tree. Can omitted tree embedded counts object attr(counts, 'tree'). pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/unweighted_unifrac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unweighted UniFrac — unweighted_unifrac","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/unweighted_unifrac.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Unweighted UniFrac — unweighted_unifrac","text":"Given \\(n\\) branches lengths \\(L\\) pair samples' abundances (\\(\\) \\(B\\)) branches: $$D = \\displaystyle \\frac{\\sum_{= 1}^{n} L_i(|A_i - B_i|)}{\\sum_{= 1}^{n} L_i(max(A_i,B_i))}$$ Abundances \\(\\) \\(B\\) coded 1 0 indicate presence absence, respectively, branch. See https://cmmr.github.io/ecodive/articles/unifrac.html details worked example.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/unweighted_unifrac.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Unweighted UniFrac — unweighted_unifrac","text":"Lozupone C, Knight R 2005. UniFrac: new phylogenetic method comparing microbial communities. Applied Environmental Microbiology, 71(12). doi:10.1128/AEM.71.12.8228-8235.2005","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/unweighted_unifrac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unweighted UniFrac — unweighted_unifrac","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Unweighted UniFrac distance matrix     unweighted_unifrac(ex_counts, tree = ex_tree) #>           Saliva       Gums       Nose #> Gums  0.05759162                       #> Nose  0.16279070 0.11162791            #> Stool 0.22325581 0.17209302 0.06046512          # Only calculate distances for A vs all.     unweighted_unifrac(ex_counts, tree = ex_tree, pairs = 1:3) #>           Saliva       Gums       Nose #> Gums  0.05759162                       #> Nose  0.16279070         NA            #> Stool 0.22325581         NA         NA"},{"path":"https://cmmr.github.io/ecodive/reference/variance_adjusted_unifrac.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance Adjusted UniFrac — variance_adjusted_unifrac","title":"Variance Adjusted UniFrac — variance_adjusted_unifrac","text":"Variance Adjusted UniFrac beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/variance_adjusted_unifrac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance Adjusted UniFrac — variance_adjusted_unifrac","text":"","code":"variance_adjusted_unifrac(counts, tree = NULL, pairs = NULL, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/variance_adjusted_unifrac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance Adjusted UniFrac — variance_adjusted_unifrac","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. tree phylo-class object representing phylogenetic tree OTUs counts. OTU identifiers given colnames(counts) must present tree. Can omitted tree embedded counts object attr(counts, 'tree'). pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/variance_adjusted_unifrac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance Adjusted UniFrac — variance_adjusted_unifrac","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/variance_adjusted_unifrac.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Variance Adjusted UniFrac — variance_adjusted_unifrac","text":"Given \\(n\\) branches lengths \\(L\\) pair samples' abundances (\\(\\) \\(B\\)) branches: $$D = \\displaystyle \\frac{\\sum_{= 1}^{n} L_i\\displaystyle \\frac{|\\frac{A_i}{A_T} - \\frac{B_i}{B_T}|}{\\sqrt{(A_i + B_i)(A_T + B_T - A_i - B_i)}} }{\\sum_{= 1}^{n} L_i\\displaystyle \\frac{\\frac{A_i}{A_T} + \\frac{B_i}{B_T}}{\\sqrt{(A_i + B_i)(A_T + B_T - A_i - B_i)}} }$$ See vignette('unifrac') details worked example.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/variance_adjusted_unifrac.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Variance Adjusted UniFrac — variance_adjusted_unifrac","text":"Chang Q, Luan Y, Sun F 2011. Variance adjusted weighted UniFrac: powerful beta diversity measure comparing communities based phylogeny. BMC Bioinformatics, 12. doi:10.1186/1471-2105-12-118","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/variance_adjusted_unifrac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance Adjusted UniFrac — variance_adjusted_unifrac","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Variance Adjusted UniFrac distance matrix     variance_adjusted_unifrac(ex_counts, tree = ex_tree) #>          Saliva      Gums      Nose #> Gums  0.4242631                     #> Nose  0.7753369 0.5565010           #> Stool 0.9655749 0.9807634 0.9785147          # Only calculate distances for A vs all.     variance_adjusted_unifrac(ex_counts, tree = ex_tree, pairs = 1:3) #>          Saliva      Gums      Nose #> Gums  0.4242631                     #> Nose  0.7753369        NA           #> Stool 0.9655749        NA        NA"},{"path":"https://cmmr.github.io/ecodive/reference/weighted_normalized_unifrac.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalized UniFrac — weighted_normalized_unifrac","title":"Normalized UniFrac — weighted_normalized_unifrac","text":"Normalized UniFrac beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/weighted_normalized_unifrac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalized UniFrac — weighted_normalized_unifrac","text":"","code":"weighted_normalized_unifrac(counts, tree = NULL, pairs = NULL, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/weighted_normalized_unifrac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalized UniFrac — weighted_normalized_unifrac","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. tree phylo-class object representing phylogenetic tree OTUs counts. OTU identifiers given colnames(counts) must present tree. Can omitted tree embedded counts object attr(counts, 'tree'). pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/weighted_normalized_unifrac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalized UniFrac — weighted_normalized_unifrac","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/weighted_normalized_unifrac.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Normalized UniFrac — weighted_normalized_unifrac","text":"Given \\(n\\) branches lengths \\(L\\) pair samples' abundances (\\(\\) \\(B\\)) branches: $$D = \\displaystyle \\frac{\\sum_{= 1}^{n} L_i|\\frac{A_i}{A_T} - \\frac{B_i}{B_T}|}{\\sum_{= 1}^{n} L_i(\\frac{A_i}{A_T} + \\frac{B_i}{B_T})}$$ See vignette('unifrac') details worked example.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/weighted_normalized_unifrac.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Normalized UniFrac — weighted_normalized_unifrac","text":"Lozupone CA, Hamady M, Kelley ST, Knight R 2007. Quantitative Qualitative \\(\\beta\\) Diversity Measures Lead Different Insights Factors Structure Microbial Communities. Applied Environmental Microbiology, 73(5). doi:10.1128/AEM.01996-06","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/weighted_normalized_unifrac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalized UniFrac — weighted_normalized_unifrac","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # UniFrac weighted distance matrix     weighted_normalized_unifrac(ex_counts, tree = ex_tree) #>          Saliva      Gums      Nose #> Gums  0.4343436                     #> Nose  0.7891160 0.6714592           #> Stool 0.9707293 0.9868636 0.9925679          # Only calculate distances for A vs all.     weighted_normalized_unifrac(ex_counts, tree = ex_tree, pairs = 1:3) #>          Saliva      Gums      Nose #> Gums  0.4343436                     #> Nose  0.7891160        NA           #> Stool 0.9707293        NA        NA"},{"path":"https://cmmr.github.io/ecodive/reference/weighted_unifrac.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted UniFrac — weighted_unifrac","title":"Weighted UniFrac — weighted_unifrac","text":"Weighted UniFrac beta diversity metric.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/weighted_unifrac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted UniFrac — weighted_unifrac","text":"","code":"weighted_unifrac(counts, tree = NULL, pairs = NULL, cpus = n_cpus())"},{"path":"https://cmmr.github.io/ecodive/reference/weighted_unifrac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted UniFrac — weighted_unifrac","text":"counts OTU abundance matrix column sample, row OTU. object coercible .matrix() can given , well phyloseq, rbiom, SummarizedExperiment, TreeSummarizedExperiment objects. tree phylo-class object representing phylogenetic tree OTUs counts. OTU identifiers given colnames(counts) must present tree. Can omitted tree embedded counts object attr(counts, 'tree'). pairs combinations samples distances calculated ? default value (NULL) calculates -vs-. Provide numeric logical vector specifying positions distance matrix calculate. See examples. cpus many parallel processing threads used. default, n_cpus(), use logical CPU cores.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/weighted_unifrac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted UniFrac — weighted_unifrac","text":"dist object.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/weighted_unifrac.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Weighted UniFrac — weighted_unifrac","text":"Given \\(n\\) branches lengths \\(L\\) pair samples' abundances (\\(\\) \\(B\\)) branches: $$D = \\sum_{= 1}^{n} L_i|\\frac{A_i}{A_T} - \\frac{B_i}{B_T}|$$ See vignette('unifrac') details worked example.","code":""},{"path":"https://cmmr.github.io/ecodive/reference/weighted_unifrac.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Weighted UniFrac — weighted_unifrac","text":"Lozupone CA, Hamady M, Kelley ST, Knight R 2007. Quantitative Qualitative \\(\\beta\\) Diversity Measures Lead Different Insights Factors Structure Microbial Communities. Applied Environmental Microbiology, 73(5). doi:10.1128/AEM.01996-06","code":""},{"path":[]},{"path":"https://cmmr.github.io/ecodive/reference/weighted_unifrac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted UniFrac — weighted_unifrac","text":"","code":"# Example counts matrix     ex_counts #>                   Saliva Gums Nose Stool #> Streptococcus        162  793   22     1 #> Bacteroides            2    4    2   611 #> Corynebacterium        0    0  498     1 #> Haemophilus          180   87    2     1 #> Propionibacterium      1    1  251     0 #> Staphylococcus         0    1  236     1          # Weighted UniFrac distance matrix     weighted_unifrac(ex_counts, tree = ex_tree) #>          Saliva      Gums      Nose #> Gums   37.08021                     #> Nose   67.00360  55.56710           #> Stool 110.25564 109.96250 110.14056          # Only calculate distances for A vs all.     weighted_unifrac(ex_counts, tree = ex_tree, pairs = 1:3) #>          Saliva      Gums      Nose #> Gums   37.08021                     #> Nose   67.00360        NA           #> Stool 110.25564        NA        NA"},{"path":"https://cmmr.github.io/ecodive/news/index.html","id":"ecodive-100","dir":"Changelog","previous_headings":"","what":"ecodive 1.0.0","title":"ecodive 1.0.0","text":"first release ecodive.","code":""}]
